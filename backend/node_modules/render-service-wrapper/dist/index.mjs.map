{"version":3,"sources":["../src/healthCheckManager.ts","../src/service.ts"],"sourcesContent":["import express from \"express\"\r\n\r\n/**\r\n * This class is used to create a health check endpoint for microservices running within Render.com\r\n */\r\nexport class HealthCheckManager {\r\n    port: number;\r\n    app: express.Application;\r\n\r\n    /**\r\n     * \r\n     * @param port The port to run the healthcheck endpoint on. Usually will be 10000\r\n     * @param endpoint The path to run the healthcheck endpoint on. Usually will be \"/\"\r\n     */\r\n    constructor(expressApp: express.Application, endpoint: string = \"/healthz\") {\r\n        this.app = expressApp\r\n\r\n        this.app.get(endpoint, (req: any, res: any) => {\r\n            res.status(200).send(\"\")\r\n        })\r\n    }\r\n}","import { Server } from \"http\";\r\nimport { HealthCheckManager } from \"./healthCheckManager\";\r\nimport express from \"express\"\r\n\r\nexport interface ServiceConfig {\r\n    port?: number;\r\n    healthCheckEndpoint?: string;\r\n    isCronJob: boolean\r\n}\r\n\r\n/**\r\n * This is an abstract class which is meant to serve as a wrapper for all microservices used.\r\n * It provides some of the basic requried functionality, such as starting the health check manager.\r\n */\r\nexport abstract class Service {\r\n    port: number;\r\n    healthCheckEndpoint: string;\r\n    isCronJob: boolean;\r\n    private healthCheckManager: HealthCheckManager;\r\n    expressApp: express.Application;\r\n    expressServer: Server | null = null;\r\n\r\n    constructor(config: ServiceConfig) {\r\n        this.port = config.port ?? 10000;\r\n        this.healthCheckEndpoint = config.healthCheckEndpoint ?? \"/\";\r\n        this.isCronJob = config.isCronJob;\r\n\r\n        this.expressApp = express()\r\n        this.expressServer = this.expressApp.listen(this.port)\r\n        this.healthCheckManager = new HealthCheckManager(this.expressApp, this.healthCheckEndpoint);\r\n    }\r\n\r\n    // Starts the health check manager and runs the microservice\r\n    async start() {\r\n        await this.run()\r\n\r\n        // Terminate after execution if the microservice is a cron job, in order to prevent it from hanging\r\n        if(this.isCronJob) {\r\n            this.expressServer.close()\r\n            this.stop()\r\n        }\r\n    }\r\n\r\n    // Microservice code goes here\r\n    abstract run(): Promise<void>\r\n\r\n    // Stops the microservice\r\n    async stop() {\r\n        process.exit();\r\n    }\r\n}"],"mappings":";AAKO,IAAM,qBAAN,MAAyB;AAAA,EAC5B;AAAA,EACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,YAAiC,WAAmB,YAAY;AACxE,SAAK,MAAM;AAEX,SAAK,IAAI,IAAI,UAAU,CAAC,KAAU,QAAa;AAC3C,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE;AAAA,IAC3B,CAAC;AAAA,EACL;AACJ;;;ACnBA,OAAO,aAAa;AAYb,IAAe,UAAf,MAAuB;AAAA,EAC1B;AAAA,EACA;AAAA,EACA;AAAA,EACQ;AAAA,EACR;AAAA,EACA,gBAA+B;AAAA,EAE/B,YAAY,QAAuB;AAC/B,SAAK,OAAO,OAAO,QAAQ;AAC3B,SAAK,sBAAsB,OAAO,uBAAuB;AACzD,SAAK,YAAY,OAAO;AAExB,SAAK,aAAa,QAAQ;AAC1B,SAAK,gBAAgB,KAAK,WAAW,OAAO,KAAK,IAAI;AACrD,SAAK,qBAAqB,IAAI,mBAAmB,KAAK,YAAY,KAAK,mBAAmB;AAAA,EAC9F;AAAA;AAAA,EAGA,MAAM,QAAQ;AACV,UAAM,KAAK,IAAI;AAGf,QAAG,KAAK,WAAW;AACf,WAAK,cAAc,MAAM;AACzB,WAAK,KAAK;AAAA,IACd;AAAA,EACJ;AAAA;AAAA,EAMA,MAAM,OAAO;AACT,YAAQ,KAAK;AAAA,EACjB;AACJ;","names":[]}